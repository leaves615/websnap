package cn.leaves.websnap.batis.mapper;

import cn.leaves.websnap.batis.entity.Page;
import cn.leaves.websnap.batis.entity.Seed;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

public interface PageMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @Delete({
        "delete from page",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @Insert({
        "insert into page (id, seedId, ",
        "title,",
        "weburl, fetchTime, ",
        "hasContent, content)",
        "values (#{id,jdbcType=BIGINT}, #{seedid,jdbcType=BIGINT}, ",
        "#{weburl,jdbcType=VARCHAR}, #{fetchtime,jdbcType=TIMESTAMP}, ",
        "#{hascontent,jdbcType=BIT}, #{content,jdbcType=LONGVARCHAR})"
    })
    @Options(keyProperty = "id", keyColumn = "id", useGeneratedKeys = true)
    int insert(Page record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @InsertProvider(type=PageSqlProvider.class, method="insertSelective")
    @Options(keyProperty = "id", keyColumn = "id", useGeneratedKeys = true)
    int insertSelective(Page record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, seedId, weburl, fetchTime, hasContent, content",
        "from page",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="seedId", property="seedid", jdbcType=JdbcType.BIGINT),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="weburl", property="weburl", jdbcType=JdbcType.VARCHAR),
        @Result(column="fetchTime", property="fetchtime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="hasContent", property="hascontent", jdbcType=JdbcType.BIT),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    Page selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @UpdateProvider(type=PageSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Page record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @Update({
        "update page",
        "set seedId = #{seedid,jdbcType=BIGINT},",
          "title = #{title,jdbcType=VARCHAR},",
          "weburl = #{weburl,jdbcType=VARCHAR},",
          "fetchTime = #{fetchtime,jdbcType=TIMESTAMP},",
          "hasContent = #{hascontent,jdbcType=BIT},",
          "content = #{content,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKeyWithBLOBs(Page record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table page
     *
     * @mbggenerated
     */
    @Update({
        "update page",
        "set seedId = #{seedid,jdbcType=BIGINT},",
          "title = #{title,jdbcType=VARCHAR},",
          "weburl = #{weburl,jdbcType=VARCHAR},",
          "fetchTime = #{fetchtime,jdbcType=TIMESTAMP},",
          "hasContent = #{hascontent,jdbcType=BIT}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Page record);

    @Select({
            "select count(id)",
            "from page",
            "where weburl = #{url}"
    })
    int countUrl(String url);

    com.github.pagehelper.Page<Seed> findBySelective(Page record);
}